#include <iostream>
#include <string>
using namespace std;

inline void error(char* str) {
	fprintf(stderr, "%s\n", str);
	exit(1);
};

class Node {
	Node* link; // pointer to next node
	int		data; // data field of 'this' node

public:
	Node(int val = 0) { data = val; link = NULL; } //Node를 인자가 있는 객체로 받기 때문에 매개변수가 필요함, 0을 디폴트 매개변수로 사용, 포인터는 NULL로 초기화해야함
	Node* getLink() { return link; }
	void setLink(Node* next) { link = next; }
	void display() {
		printf(" <%d> ", data);
	}
	int getData() { return data; }

	// insert new node (n) next to current node
	void insertNext(Node* n) {
		if (n != NULL) {
			n->link = link;
			link = n;
		}
	}

	// remove next node from current node
	Node* removeNext() {
		Node* removed = link;
		if (removed != NULL)
			link = removed->link;
		return removed;
	}
};

class LinkedList {
	Node	org;	// head node (not head pointer!)

public:
	LinkedList() : org() {  }
	~LinkedList() { clear(); }

	void clear() {
		while (!isEmpty())
			delete remove(0);
	}
	Node* getHead() {
		return org.getLink();
	}
	bool isEmpty() {
		return getHead() == NULL;
	}

	// return node in position 'pos' from the list
	Node* getEntry(int pos) {
		Node* n = &org;
		for (int i = -1; i < pos; i++, n = n->getLink())
			if (n == NULL)
				break;
		return n;
	}

	// insert new node (n) in position 'pos'
	void insert(int pos, Node* n) {
		Node* prev = getEntry(pos - 1);
		if (prev != NULL)
			prev->insertNext(n);
	}

	// remove a node in position 'pos'
	Node* remove(int pos) {
		Node* prev = getEntry(pos - 1);
		return prev->removeNext();
	}

	// return size of list
	int size() {
		int count = 0;
		for (Node* p = getHead(); p != NULL; p = p->getLink())
			count++;
		return count;
	}

	// display data fields of nodes in the list
	void display(const char* str = "List") {
		printf(str);
		printf("[list size %d] : ", size());
		for (Node* p = getHead(); p != NULL; p = p->getLink())
			p->display();
		printf("\n");
	}

	// reverse list
	void reverse() {
		Node* current = getHead(); //현재 노드를 첫번째 요소로 설정
		Node* prev = NULL; 
		Node* next = NULL; 

		while (current != NULL) { //연결 리스트 끝까지 반복
			next = current->getLink(); //다음 노드를 가져옴
			current->setLink(prev); // 현재 노드를 이전 노드와 연결
			prev = current; //이전 노드를 현재 노드로 설정
			current = next; //현재 노드를 다음 노드드로 설정
		}
		org.setLink(prev); // head 노드를 업데이트
	}


	// return new list that have data fields of two lists in descending order
	LinkedList* mergeTwoLists(LinkedList* list2) {
		LinkedList* result = new LinkedList(); //결과를 저장할 새로운 연결 리스트 생성

		Node* p1 = getHead(); //두 연결 리스트 중 하나라도 끝날때까지 반복
		Node* p2 = list2->getHead(); //list2의 첫번째 노드를 가리키는 포인터 생성

		while (p1 != NULL && p2 != NULL) { //두 연결 리스트 중 하나라도 끝날 때까지 반복
			if (p1->getData() >= p2->getData()) { //첫 번째 연결 리스트의 값이 더 큰 경우
				result->insert(result->size(), new Node(p1->getData())); //첫 번째 노드 값을 결과 리스트에 삽입
				p1 = p1->getLink(); //첫번째 연결 리스트에서 다음 노드로 이동
			}
			else { //두번째 값이 더 큰 경우
				result->insert(result->size(), new Node(p2->getData())); //두번째 연결 리스트의 값을 결과 리스트에 삽입
				p2 = p2->getLink(); //두번째 연결 리스트에서 다음 노드로 이동
			}
		}

		while (p1 != NULL) { //첫 번째 연결 리스트의 남은 노드들을 결과리스트에 삽입
			result->insert(result->size(), new Node(p1->getData()));
			p1 = p1->getLink();
		}

		while (p2 != NULL) { //두 번째 연결 리스트의 남은 노드들을 결과 리스트에 삽입
			result->insert(result->size(), new Node(p2->getData()));
			p2 = p2->getLink();
		}

		return result; //결과 리스트 반환
	}
};

int main()
{
	LinkedList* list1 = new LinkedList(), * list2 = new LinkedList();
	LinkedList* list3;

	list1->insert(0, new Node(80));
	list1->insert(0, new Node(50));
	list1->insert(0, new Node(40));
	list1->insert(0, new Node(10));

	list1->display("List1(   before    )");
	list1->reverse();
	list1->display("List1(after reverse)");

	list2->insert(0, new Node(70));
	list2->insert(1, new Node(60));
	list2->insert(2, new Node(30));
	list2->insert(3, new Node(20));
	list2->display("List2(     now     )");

	list3 = list1->mergeTwoLists(list2);
	list3->display("List3( List1+List2 )");

	list1->clear();
	list2->clear();
	list1->display("List1(     end     )");
	list2->display("List2(     end     )");

	return 0;
}
